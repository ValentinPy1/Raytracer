/*
** EPITECH PROJECT, 2022
** raytracer
** File description:
** Camera.hpp
*/

#ifndef CAMERA_HPP
    #define CAMERA_HPP
    #include <SFML/Graphics.hpp>
    #include "Ray.hpp"

namespace render
{

    /**
     * @brief The Camera class is responsible for generating the rays.
     * Just like a real camera, it has a focal point, as well as a
     * captor (which is the device onto which the light is projected).
     *
     * The rays are generated from the focal point, and pass through each pixel
     * of the captor.
     *
     */
    class Camera {
    public:
        Camera(float focalPoint = 10, int captorWidth = 0, int captorHeight = 0, const sf::Vector3f &position = sf::Vector3f(0, 0, 0), const sf::Vector3f &rotation = sf::Vector3f(0, 0, 0), unsigned int recursionDepth = 0);
        ~Camera() = default;

        /**
         * @brief Return the captor of the camera.
         *
         * @return sf::Image&
         */
        sf::Image &getCaptor();

        /**
         * @brief Returns the position of the camera in the 3D space.
         *
         * @return sf::Vector3f
         */
        sf::Vector3f getPosition() const;

        /**
         * @brief Returns the rotation of the camera in the 3D space.
         *
         * @return sf::Vector3f
         */
        sf::Vector3f getRotation() const;

        /**
         * @brief Returns the focal point of the camera as a point in space.
         *
         * @return sf::Vector3f
         */
        sf::Vector3f getFocalPoint() const;

        /**
         * @brief Returns the rays generated by the camera.
         *
         * @return std::vector<render::Ray>&
         */
        std::vector<render::Ray> &getRays();

        /**
         * @brief Sets the position of the camera in the 3D space.
         *
         * @param position
         */
        void setPosition(const sf::Vector3f &position);

        /**
         * @brief Sets the rotation of the camera in the 3D space.
         *
         * @param rotation
         */
        void setRotation(const sf::Vector3f &rotation);

        /**
         * @brief Sets the focal point of the camera.
         *
         * @param focalPoint
         */
        void setFocalPoint(float focalPoint);

        /**
         * @brief Sets the size of the captor in world unit.
         *
         * @param size
         */
        void setCaptorSize(const sf::Vector2i &size);

        /**
         * @brief Sets the focal scale of the world.
         *
         * @param scale
         */
        void setScale(float scale);

        /**
         * @brief Returns the recursion depth of the camera, which will be the limit
         * for all recursive functions.
         *
         * @return unsigned int
         */
        unsigned int getRecursionDepth() const;

    private:
        /**
         * @brief Generates the rays from the focal point to the captor.
         *
         */
        void generateRays();

        /**
         * @brief Computes the position of the focal point from the specified
         * focal distance and the position of the camera.
         *
         * @param focalPoint , the distance between the camera and the focal point.
         * @return sf::Vector3f
         */
        sf::Vector3f computeFocalPoint(float focalPoint) const;

        /**
         * @brief All of the rays generated by the camera.
         *
         */
        std::vector<render::Ray> _rays;

        /**
         * @brief The position of the camera in the 3D space.
         *
         */
        sf::Vector3f _position = {0, 0, 0};

        /**
         * @brief The rotation of the camera in the 3D space.
         *
         */
        sf::Vector3f _rotation = {0, 0, 0};

        /**
         * @brief The focal point of the camera.
         *
         */
        sf::Vector3f _focalPoint;

        /**
         * @brief The captor of the camera.
         *
         */
        sf::Image _captor;

        /**
         * @brief The size of the captor in world unit.
         *
         */
        sf::Vector2i _captorSize = {10, 10}; // in world units

        /**
         * @brief The focal scale of the world.
         *
         */
        float scale = 10;

        float _focalDistance = 10;

        unsigned int _recursionDepth = 0;
    };
} // namespace render


#endif // CAMERA_HPP
